#during the competition
====================================================================================================
----------------------------------------------------------------------------------------------------
====================================================================================================

Problem description:

time limit per test:    1 second
memory limit per test:  256 megabytes

A permutation of length n is a sequence of integers from 1 to n of length n containing each number exactly once.
For example, [1], [4,3,5,1,2], [3,2,1] are permutations, and [1,1], [0,1], [2,2,1,4] are not.
There was a permutation p[1…n]. It was merged with itself. In other words, let's take two instances
of p and insert elements of the second p into the first maintaining relative order of elements. 
The result is a sequence of the length 2n (1 ≤ n ≤ 50).

For example, if p=[3,1,2] some possible results are: [3,1,2,3,1,2], [3,3,1,1,2,2], [3,1,3,1,2,2]. 
The following sequences are not possible results of a merging: [1,3,2,1,2,3], [3,1,2,3,2,1], [3,3,1,2,2,1].

For example, if p=[2,1] the possible results are: [2,2,1,1], [2,1,2,1]. 
The following sequences are not possible results of a merging: [1,1,2,2], [2,1,1,2], [1,2,2,1].

Your task is to restore the permutation p by the given resulting sequence a  (1 ≤ a_i ≤ n),. 
It is guaranteed that the answer exists and is unique.
You have to answer t independent test cases (1 ≤ t ≤ 400).

====================================================================================================
----------------------------------------------------------------------------------------------------
====================================================================================================

Solution algorithm:

Notice that if we go from begin to end of input array and get from it every unique number once, we
get from array needed subarray because we preserve concerning places and get two equales subarrays,
because if it can be another two appropriate subarrays, we can get two difference permutation for
one sequence of integers from 1 to current_n, but this is impossible, a contradiction.

====================================================================================================
----------------------------------------------------------------------------------------------------
====================================================================================================

Time and memory usage:

Time:   31 ms
Memory: 3600 kb

====================================================================================================
----------------------------------------------------------------------------------------------------
====================================================================================================
